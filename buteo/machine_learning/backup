# if options["label_geom"] is not None and fid not in processed_fids:
#                 if not is_vector(options["label_geom"]):
#                     raise TypeError(
#                         "label geom is invalid. Did you input a valid geometry?"
#                     )

#                 label_clip_path = f"/vsimem/fid_{uuid}_{str(fid)}_clipped.shp"
#                 label_ras_path = f"/vsimem/fid_{uuid}_{str(fid)}_rasterized.tif"
#                 label_warp_path = f"/vsimem/fid_{uuid}_{str(fid)}_resampled.tif"

#                 intersect_vector(
#                     options["label_geom"], fid_ds, out_path=label_clip_path
#                 )

#                 try:
#                     rasterize_vector(
#                         label_clip_path,
#                         options["label_res"],
#                         out_path=label_ras_path,
#                         extent=valid_path,
#                     )

#                 except Exception:
#                     array_to_raster(
#                         np.zeros(valid_arr.shape, dtype="float32"),
#                         valid_path,
#                         out_path=label_ras_path,
#                     )

#                 resample_raster(
#                     label_ras_path,
#                     pixel_size,
#                     resample_alg="average",
#                     out_path=label_warp_path,
#                 )

#                 labels_arr = (
#                     raster_to_array(label_warp_path) * options["label_mult"]
#                 ).astype("float32")

#                 if options["output_raster_labels"]:
#                     array_to_raster(
#                         labels_arr,
#                         label_warp_path,
#                         out_path=f"{outdir}{options['prefix']}label_{str(fid)}{options['postfix']}.tif",
#                     )

# if options["label_geom"] is not None:
# gdal.Unlink(label_clip_path)
# gdal.Unlink(label_ras_path)
# gdal.Unlink(label_warp_path)

#             if options["label_geom"] is not None and not labels_processed:
#                 labels_masked = np.concatenate(
#                     get_overlaps(
#                         labels_arr, offsets, tile_size, options["border_check"]
#                     )
#                 )[valid_mask]

#                 gdal.Unlink(label_clip_path)
#                 gdal.Unlink(label_ras_path)
#                 gdal.Unlink(label_warp_path)

#                                 if options["label_geom"] is not None and not labels_processed:
#                     list_labels.append(labels_masked)

                # if options["label_geom"] is not None and not labels_processed:

                #     if options["output_raster_labels"]:
                #         np.save(
                #             f"{outdir}{options['prefix']}{str(fid)}_label_{name}{options['postfix']}.npy",
                #             valid_masked.filled(options["fill_value"]),
                #         )

                #             if options["label_geom"] is not None and not labels_processed:

                # if options["output_raster_labels"]:
                #     np.save(
                #         f"{outdir}{options['prefix']}label_{name}{options['postfix']}.npy",
                #         np.ma.concatenate(list_labels).filled(options["fill_value"])[apply_mask],
                #     )
                # labels_processed = True